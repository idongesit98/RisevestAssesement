// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  password    String
  role        UserRole        @default(USER)
  uploads     UploadedFiles[]
  folders     Folder[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  FileHistory FileHistory[]
}

model Folder {
  id             String          @id @default(uuid())
  name           String
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  parentFolder   Folder?         @relation("FolderParent", fields: [parentFolderId], references: [id])
  parentFolderId String?
  subfolders     Folder[]        @relation("FolderParent")
  uploads        UploadedFiles[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model UploadedFiles {
  id           String   @id @default(uuid())
  filename     String
  key          String   @unique
  size         Int
  url          String?
  publicId     String
  resourceType String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  folder       Folder?  @relation(fields: [folderId], references: [id])
  status       FileStatus @default(SAFE) 
  folderId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  history      FileHistory[] @relation("FileHistory")
}

model FileHistory {
  id     String @id @default(uuid())
  file   UploadedFiles @relation(fields: [fileId],references: [id],name: "FileHistory")
  fileId String
  action String
  doneBy User? @relation(fields: [userId],references: [id])
  userId String?
  timeStamp DateTime @default(now())
  details Json?
}

enum UserRole {
  USER
  ADMIN
}

enum FileStatus {
  SAFE
  UNSAFE
}
